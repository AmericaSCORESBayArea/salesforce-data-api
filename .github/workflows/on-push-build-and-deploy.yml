# This workflow will build a MuleSoft project and deploy to CloudHub

name: Build and Deploy to Sandbox

on:
  push:
    branches: [ sandbox ]
  workflow_dispatch:
    branches: [ sandbox ]
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Add repo credentials
      uses: s4u/maven-settings-action@v2.4.0
      with:
        servers: |
          [{
           "id": "mule-enterprise",
           "username": "${{ secrets.mule_nexus_username }}",
           "password": "${{ secrets.mule_nexus_password }}"
          },
          {
           "id": "scores-exchange",
           "username": "${{ secrets.anypoint_cicd_username }}",
           "password": "${{ secrets.anypoint_cicd_password }}"
          }]
    - name: Insert Secret Properties to the .properties file
      env:
        SFDC_TKN: ${{ secrets.sfdc_sandbox_integrationuser_tkn }}
        SFDC_PASSWORD: ${{ secrets.sfdc_sandbox_integrationuser_pwd }}
        TYPEFORM_CLIENTID: ${{ secrets.typeform_clientid }}
        TYPEFORM_CLIENTSECRET: ${{ secrets.typeform_clientsecret }}
        TYPEFORM_TKN: ${{ secrets.typeform_tkn }}
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        echo "Checking if sandbox.properties file exists:"
        if [ -f src/main/resources/properties/sandbox.properties ]; then
          echo "sandbox.properties file exists."
        else
          echo "Error: sandbox.properties file does not exist."
          exit 1
        fi
  
        sed -i "s/sfdc.tkn=/sfdc.tkn=${{ secrets.sfdc_sandbox_integrationuser_tkn }}/" src/main/resources/properties/sandbox.properties
        sed -i "s/sfdc.password=/sfdc.password=${{ secrets.sfdc_sandbox_integrationuser_pwd }}/" src/main/resources/properties/sandbox.properties
        sed -i "s/typeform.clientid=/typeform.clientid=${{ secrets.typeform_clientid }}/" src/main/resources/properties/sandbox.properties
        sed -i "s/typeform.clientsecret=/typeform.clientsecret=${{ secrets.typeform_clientsecret }}/" src/main/resources/properties/sandbox.properties
        sed -i "s/typeform.tkn=/typeform.tkn=${{ secrets.typeform_tkn }}/" src/main/resources/properties/sandbox.properties
    - name: Print effective-settings
      run: mvn help:effective-settings
    - name: Print effective-pom
      run: mvn help:effective-pom
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    - name: Print effective-settings
      run: mvn help:effective-settings
    - name: Deploy to Sandbox
      env:
        USERNAME: ${{ secrets.anypoint_cicd_username }}
        PASSWORD: ${{ secrets.anypoint_cicd_password }}
        SFDC_TKN: ${{ secrets.sfdc_tkn }}
        SFDC_PASSWORD: ${{ secrets.sfdc_sandbox_integrationuser_pwd }}
        TYPEFORM_CLIENTID: ${{ secrets.typeform_clientid }}
        TYPEFORM_CLIENTSECRET: ${{ secrets.typeform_clientsecret }}
        TYPEFORM_TKN: ${{ secrets.typeform_tkn }}
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy -e -Dmule.artifact=$artifactName -Danypoint.username="$USERNAME" -Danypoint.password="$PASSWORD" -Denv=Sandbox -Denv.lowercase=sandbox -Dsfdc.password="$SFDC_SANDBOX_INTEGRATIONUSER_PWD" -Dtypeform.clientid="$TYPEFORM_CLIENTID" -Dtypeform.clientsecret="$TYPEFORM_CLIENTSECRET" -Dtypeform.tkn="$TYPEFORM_TKN" -Dsfdc.tkn="$SFDC_SANDBOX_INTEGRATIONUSER_TKN" -DskipTests
