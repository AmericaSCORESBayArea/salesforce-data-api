#%RAML 1.0
title: salesforce-data-api
uses: 
  types: datatypes.raml

/teams:
  post:
    description: (NOT IMPLEMENTED) Create a new team
    body:
      application/json:
        type: types.TeamCreateModel
  get:
    description: (NOT IMPLEMENTED) Get Teams for given query params
    responses:
      200:
        body:
          application/json:
            type: types.Team[]
  /{teamId}:
    get:
      displayName: Get Team details
      description: Get Team details associated with the team Id
      responses:
        200:
          body:
            application/json:
              type: types.Team
        404: 
          body:
            application/json:
              example:
                message: Team Not Found
    patch:
      description: (NOT IMPLEMENTED)
      body:
        application/json:
          type: types.TeamUpdateModel

/teamSeasons:
  post:
    description: Create a new TeamSeason
    body:
      application/json:
        type: types.TeamSeasonCreateModel
  get:
    description: Get TeamSeasons for given query params
    queryParameters:
      date:
        displayName: date
        description: TeamSeason Start Date
        type: date-only
        required: true
      endDate:
        displayName: endDate
        description: TeamSeason End Date (by default, today's date)
        type: date-only
        required: false
      isWithinDateRange:
        displayName: isWithinDateRange
        description: If **enabled**, returns `teamSeasons` between the start and end dates (If end date is not provided, returns all `teamSeasons` after the start date) If **disabled**, returns `teamSeasons` with start date equal to the give date.
        type: boolean
        required: false
    responses:
      200:
        body:
          application/json:
            type: types.TeamSeasonBaseModel[]
  /searchByTeamName:
    get:
      description: Get TeamSeasons for given query params
      queryParameters:
        teamName:
          displayName: teamName
          description: Team Name
          type: string
          required: true
      responses:
        200:
          body:
            application/json:
              type: types.TeamSeasonBaseModel[]
  /{teamSeasonId}:
    get:
      description: (NOT IMPLEMENTED)
      responses:
        200:
          body:
            application/json:
              type: types.TeamSeasonBaseModel
        404: 
          body:
            application/json:
              example:
                message: TeamSeason Not Found
    patch:
      displayName: Update TeamSeason
      description: Update TeamSeason for given id
      body:
        application/json:
          type: types.TeamSeasonUpdateModel
      responses:
        200:
          body:
            application/json:
              example:
                message: TeamSeason updated
        400:
          body:
            application/json:
              example:
                message: Bad request
        404:
          body:
            application/json:
              example:
                message: TeamSeason not found
    uriParameters:
      teamSeasonId:
        description: The unique identifier for the team season
        type: string
        required: true
        pattern: "^[A-Za-z0-9]{18}$"
    /contacts:
      /{contactId}:
        uriParameters:
          contactId:
            description: The unique identifier for the contact
            type: string
            required: true
            pattern: "^[A-Za-z0-9]{18}$"
        /enrollments:
          /{enrollmentId}:
            uriParameters:
              enrollmentId:
                description: The unique identifier for the enrollment
                type: string
                required: true
                pattern: "^[A-Za-z0-9]{18}$"
            patch:
              description: Update Enrollment (dates only)
              body:
                application/json:
                  type: types.EnrollmentUpdateModelDatesOnly
              responses:
                200:
                  body:
                    application/json:
                      example:
                        message: Enrollment updated
                400:
                  body:
                    application/json:
                      example:
                        message: Bad request
                404:
                  body:
                    application/json:
                      example:
                        message: Enrollment not found

/typeform:
  /responses:
    get:
      responses:
        200:


/seasons:
  get:
    description: Get Latest Seasons
    responses:
      200:
        body:
          application/json:
            type: types.Season[]
      400:
          body:
            application/json:
              example:
                message: Bad request      
      404:
          body:
            application/json:
              example:
                message: Seasons not found 
  /{seasonId}:
    uriParameters:
      seasonId:
        description: The unique identifier for the season
        type: string
        required: true
        pattern: "^[A-Za-z0-9]{18}$"
    /teamSeasons:
      get:
        description: Get a list of teamSeasons based on SeasonId and Region Name
        queryParameters:
          region:
            displayName: Region
            description: Associated region
            type: string
            required: false
        responses:
          200:
            description: Successfully retrieved user's Team-Seasons
            body:
              application/json:
                type: types.TeamSeasonBaseModel[]
          400: 
            body:
              application/json:
                example:
                  message: Error retrieving Team-Seasons
          404: 
            body:
              application/json:
                example:
                  message: Team-Seasons Not Found
      
/enrollments:
  post:
    description: Create a new Enrollment for a TeamSeason
    body:
      application/json:
        type: types.EnrollmentCreateModel
  get:
    description: Get Enrollments for given query params
    queryParameters:
      teamSeasonId:
        displayName: teamSeasonId
        description: Team Season Id
        type: string
        required: true
    responses:
      200:
        body:
          application/json:
            type: types.Enrollment[]
  delete:
    description: Delete one or more Enrollment records
    body:
      application/json:
        type: array
        items:
          type: object
          properties:
            EnrollmentId: types.SalesforceUniqueId
    responses:
      200: 
        body:
          application/json:
            example:
              message: Enrollment/s deleted successfully 
  /{enrollmentId}:
    get:
      responses:
        200:
          body:
            application/json:
              type: types.Enrollment
    patch:
      body:
        application/json:
          type: types.EnrollmentUpdateModel

/contacts: 
  post:
    displayName: Register Student
    description: Creates a new student (Contact->recordType=SCORES Student) in the America SCORES Salesforce database
    body:
      application/json:
        description: payload should be new Contact with values filled out from registration form
        type: types.Contact
    responses:
      200:
        description: Successful Registration
        body:
          application/json:
            example:
              ContactId: abc123
      400:
        body:
          application/json:
            example:
              message: Error in registration
  get:
    displayName: Get contacts
    description: Get contacts matching query params (to be used for Student contacts for now)
    queryParameters:
      externalStudentId:
        displayName: externalStudentId
        description: External Student Id
        type: string
        required: false
      externalStudentIdSource:
        displayName: externalStudentIdSource
        description: External Student Id Source e.g. DCYF
        type: string
        required: false
      firstName:
        type: string
        required: false
      lastName: 
        type: string
        required: false
      birthDate:
        type: date-only
        required: false
    responses:
      200:
        body:
          application/json:
            type: types.Contact[]
  /search:
    get:
      displayName: Get matching contacts using SOSL
      description: Get contacts matching a search string using Salesforce Object Search Language (to be used for Student contacts for now)
      queryParameters:
        searchString:
          displayName: searchString
          description: Search string to match against name fields
          type: string
          required: true
        region:
          displayName: region
          description: Filter contacts by region
          type: string
          required: false
        page:
          displayName: page
          description: Page number (1-based). Defaults to 1 if not specified.
          type: integer
          required: false
          minimum: 1
          default: 1
        pageSize:
          displayName: pageSize
          description: Number of records per page. Defaults to 8 if not specified.
          type: integer
          required: false
          minimum: 1
          maximum: 100
          default: 8
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                contacts: types.Contact[]
                totalPages: integer
                currentPage: integer
                pageSize: integer
                totalRecords: integer
  /searchByPhoneNumber:
    get:
      displayName: Get matching contacts for a given phone number
      description: Get contacts matching a search string with a phone number (to be used for Student contacts for now)
      queryParameters:
        phoneNumber:
          displayName: phoneNumber
          description: Phone number
          type: string
          required: true
          pattern: '^\+?[1-9]\d{1,14}$'  # E.164 international phone number format
      responses:
        200:
          body:
            application/json:
              type: types.Contact[]
        400:
          body:
            application/json:
              example:
                message: Invalid phone number format. The phone number must be in E.164 format.

  /{contactId}:
    get:
      displayName: Get contact
      description: Get contact for given id (to be used for Student contacts for now)
      responses:
        200:
          body:
            application/json:
              type: types.Contact
    patch:
      displayName: Update contact
      description: Update contact fields for given id
      body:
        application/json:
          type: types.ContactPatchModel
      responses:
        200:
          body:
            application/json:
              example:
                message: Contact updated
        400:
          body:
            application/json:
              example:
                message: Bad request
        404:
          body:
            application/json:
              example:
                message: Contact not found

    delete:
      displayName: Delete contact
      description: Delete contact for given id
      responses:
        200:
          body:
            application/json:
              example:
                message: Contact deleted
        400:
          body:
            application/json:
              example:
                message: Bad request
        404:
          body:
            application/json:
              example:
                message: Contact not found
        405:
          body:
            application/json:
              example:
                message: Method not allowed (on production)
    /finishRegistration:
      post:
        displayName: Finish Student Registration
        description: Finish student registration by signing waiver.
        body:
          application/json:
            type: object
            properties:
              waiverId:
                type: string
                description: "The unique identifier for the waiver."
                required: true
              datetime:
                type: string
                description: "The date and time of the registration, in ISO 8601 format."
                required: true
              waiverResponse:
                type: string
                description: "Response to the waiver."
                required: true
        responses:
          200:
            description: Registration completed.
            body:
              application/json:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration completed."
          400:
            description: Bad request.
            body:
              application/json:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bad request."
    /waiver/{waiverId}:
      get:
        displayName: Get Waiver History by contact id and waiver id
        description: Retrieve Waiver History data for a speciifc contact id and waiver id
        responses:
          200:
            body:
              application/json:
          400: 
            body:
              application/json:
                example:
                  message: Bad Request
          404:
            body:
              application/json:
                example:
                  message: Waiver not found
      post:
        description: Submits a waiver response.
        body:
          application/json:
            type: object
            properties:
              waiverResponse: string
              datetime: string
              contactId: string
              contactEmail: string
              PaperReceived: boolean
            example:
              waiverResponse: Acceptance
              datetime: 2025-01-09T14:30:00Z
              contactId: 003cX00000AzCjHQAV
              contactEmail: email@003cX000008IZnXQAWemail.com
              PaperReceived: true
        responses:
          200:
            body:
              application/json:
                example: { "WaiverHistory": "a3VcX000000GpY1UAK" }
          400:
            body:
              application/json:
                example: { "message": "Waiver History creation failed"}
  /{contactId}/enrollments:
    get:
      displayName: Get enrollment data by contact id
      description: Retrieve enrollment data for a specific contact.
      queryParameters:
        schoolSiteName:
          type: string
          required: false
        seasonName:
          type: string
          required: false
        teamSeasonName:
          type: string
          required: false
        startDate:
          type: string
          required: false
        endDate:
          type: string
          required: false
      responses:
        200:
          body:
            application/json:
              type: types.EnrollmentByContactID[]
              example: |
                [
                  {
                    "Id": "a0m1T000009RSFgQAO",
                    "TeamSeasonId": "a0q1T000008JxqSQAS",
                    "TeamSeasonName": "Cleveland Juniors-2019 Fall",
                    "StartDate": "2019-08-12",
                    "EndDate": "2019-12-20",
                    "SeasonName": "2019 Fall",
                    "TeamID": "a1N1T000005wLYEUA2",
                    "TeamName": "Cleveland Juniors",
                    "SchoolSiteId": "0015000002HvvW0AAJ",
                    "SchoolSiteName": "Cleveland Elementary School"
                  },
                  {
                    "Id": "a0m1T000009f2p5QAA",
                    "TeamSeasonId": "a0q1T000009ouh3QAA",
                    "TeamSeasonName": "Cleveland Juniors-2020 Spring",
                    "StartDate": "2020-01-01",
                    "EndDate": "2020-05-31",
                    "SeasonName": "2020 Spring",
                    "TeamID": "a1N1T000005wLYEUA2",
                    "TeamName": "Cleveland Juniors",
                    "SchoolSiteId": "0015000002HvvW0AAJ",
                    "SchoolSiteName": "Cleveland Elementary School"
                  },
                  {
                    "Id": "a0mHs00000Cc7tAIAR",
                    "TeamSeasonId": "a0qHs00000CHAisIAH",
                    "TeamSeasonName": "Guadalupe SELECTA-2023-2024",
                    "StartDate": "2023-08-14",
                    "EndDate": "2024-06-07",
                    "SeasonName": "2023-2024",
                    "TeamID": "a1NHs00000Ahf2zMAB",
                    "TeamName": "Guadalupe SELECTA",
                    "SchoolSiteId": "0015000002HvvVwAAJ",
                    "SchoolSiteName": "Guadalupe Elementary School"
                  }
                ] 
/regions:
  get:
    displayName: Retrieve regions
    description: Retrieves regions that contain school sites
    responses:
      200:
        body:
          application/json:
      400: 
        body:
          application/json:
            example:
              message: Bad Request
      404:
        body:
          application/json:
            example:
              message: regions not found 
  /active:
    get:
      displayName: Retrieve Active Regions
      description: |
        Retrieves a list of active regions. Each region includes only the region name.
      responses:
        200:
          description: A list of active regions with school sites.
          body:
            application/json:
              example: |
                [
                  {
                    "RegionName": "North Region"
                  },
                  {
                    "RegionName": "South Region"
                  }
                ]
  /{regionName}/schoolsites:
    get:
      displayName: Retrieve schoolsites
      description: Retrieves school sites filtered by region
      responses:
        200:
          body:
            application/json:
              type: types.SchoolSite[]
        400: 
          body:
            application/json:
              example:
                message: Bad Request
        404:
          body:
            application/json:
              example:
                message: schoolsites not found                          
/waiver:
  get:
    displayName: Retrieve waiver
    description: Retrieves waiver content filtered by region
    queryParameters:
      region:
        displayName: region
        description: Region Name
        type: string
        required: true
    responses:
      200:
        body:
          application/json:
      400: 
        body:
          application/json:
            example:
              message: Bad Request
      404:
        body:
          application/json:
            example:
              message: Waiver not found
  /{waiverId}:
    post:
      displayName: Save waiver response
      description: Save waiver response with contact info
      body: 
        application/json:                       
      responses:
        200: 
          description: Waiver History saved
          body:
            application/json:
              example:
                message: Saved waiver history
        400:
          body:
            application/json:
              example:
                message: Bad request
        404: 
          body:
            application/json:
              example:
                message: Waiver not found    
/waiverHistory:
  get:
    displayName: Retrieve waiver history
    description: Retrieves waiver history for a given contact
    queryParameters:
      contactId:
        displayName: contactId
        description: Contact Id
        type: string
        required: true
        pattern: ^[a-zA-Z0-9]{15}|[a-zA-Z0-9]{18}$  # Enforces 15 or 18 alphanumeric characters
    responses:
      200:
        body:
          application/json:
            type: types.WaiverHistory[]
      400: 
        body:
          application/json:
            example:
              message: Bad Request
      404:
        body:
          application/json:
            example:
              message: Waiver history not found                              
/sessions:
  post:
    displayName: Create a session
    description: Creates a new session under a Team Season in the America SCORES Salesforce database
    body:
      application/json:
        type: types.SessionCreateModel
    responses:
      200:
        description: Session created
        body:
          application/json:
            example:
              SessionId: a0p2i000006SLIBAA4
      400:
        body:
          application/json:
            example:
              message: Bad data
  get:
    displayName: Get sessions
    description: Get sessions matching query params
    queryParameters:
      teamSeasonId:
        displayName: teamSeasonId
        description: Team Season Id
        type: string
        required: true
      date:
        displayName: Date
        description: Session date
        type: date-only
        required: true
    responses:
      200:
        body:
          application/json:
            type: types.Session[]
  /{sessionId}:
    get:
      displayName: Get session
      description: Get session for given id
      responses:
        200:
          body:
            application/json:
              type: types.Session
    patch:
      displayName: Update session
      description: Update session fields for given id
      body:
        application/json:
          type: types.SessionUpdateModel
      responses:
        200:
          body:
            application/json:
              example:
                message: Session updated
        400:
          body:
            application/json:
              example:
                message: Bad request
        404:
          body:
            application/json:
              example:
                message: Session not found
    
    delete:
      displayName: Delete session
      description: Delete session for given session id
      responses:
        200:
          body:
            application/json:
              example:
                message: Session deleted
        400:
          body:
            application/json:
              example:
                message: Bad request
        404:
          body:
            application/json:
              example:
                message: Session not found   

    /assessments:
      get:
        description: get assessment records for SessionId
        responses:
          200:
            body:
              application/json:
                type: types.Assessment[]
          400:
            body:
              application/json:
                example:
                  message: bad request
          404:
            body:
              application/json:
                example:
                  message: assessments not found for sessionId
    /assessment:
        post:
          description: create a new assessment 
          body:
            application/json:
              type: types.AssessmentCreateModel
          responses:
            200:
              description: Success
              body:
                application/json:
                  example:
                    message: assessment created
            400:
              description: Unsuccessful
              body:
                application/json:
                  example:
                    message: Error in creating assessment!  
/attendances:
  post:
    displayName: Create an attendance record 
    description: Creates a new attendance/ updates existing under a Session in the America SCORES Salesforce database
    body:
      application/json:
        type: types.AttendanceCreateModel[]
    responses:
      200:
        description: Attendance updated
        body:
          application/json:
            example:
              AttendanceId: abc123
      400:
        body:
          application/json:
            example:
              message: Bad data
    

/coach/{coachId}:
  /regions:
    get:
      displayName: Get Regions
      description: Retrieves a list of all the Regions where a Coach has at least one Team Season
      responses:
        200:
          description: Succesfully retrieved all Regions
          body:
            application/json:
              example:
                [{
                  "Region": "San Francisco",
               }]
        400: 
          body:
            application/json:
              example:
                message: Error retrieving Regions
        404: 
          body:
            application/json:
              example:
                message: Regions Not Found
  /allSessions:
    get:
      displayName: Get All Sessions
      description: Retrieves a list of all sessions a Coach has in the lastest Season
      responses:
        200:
          description: Succesfully retrieved all Sessions
          body:
            application/json:
              type: types.Session[]
        400: 
          body:
            application/json:
              example:
                message: Error retrieving Sessions
        404: 
          body:
            application/json:
              example:
                message: Sessions Not Found
          
  /teamseasonsNotOwnedByCoach:
    get:
      displayName: Get Team Seasons Not Owned 
      description: Retrieves a list of all Team-Seasons that the user(coach) is a not part of
      queryParameters:
        date:
          displayName: Date
          description: Date selected in the mobile app
          type: date-only
          required: false
        region:
          displayName: Region
          description: Region from Coach user
          type: string
          required: true
        season:
          displayName: Season
          description: Latest Season SeasonId
          type: string
          required: true

      responses:
        200:
          description: Successfully retrieved user's Team-Seasons
          body:
            application/json:
              type: types.TeamSeasonBaseModel[]

        400: 
          body:
            application/json:
              example:
                message: Error retrieving Team-Seasons
        404: 
          body:
            application/json:
              example:
                message: Team-Seasons Not Found
  /teamseasons:
    get:
      displayName: Get All Team Seasons
      description: Retrieves a list of all Team-Seasons that the user(coach) is a part of for a given Season
      queryParameters:
        season:
          displayName: Season
          description: Season selected in the mobile app
          type: string
          required: true
      responses:
        200:
          description: Successfully retrieved user's Team-Seasons
          body:
            application/json:
              type: types.TeamSeasonBaseModel[]

        400: 
          body:
            application/json:
              example:
                message: Error retrieving Team-Seasons
        404: 
          body:
            application/json:
              example:
                message: Team-Seasons Not Found

    /{teamSeasonId}/sessions:
      get:
        displayName: Get Sessions
        description: Get Sessions for a TeamSeason and given date
        responses:
          200:
            body:
              application/json:
                type: types.Session[]   
          400:
            body:
              application/json:
                example:
                  message: Error retrieving sessions
          404:
            body:
              application/json:
                example:
                  message: No sessions for this day
      
      # post:
      #   description: create a new session while using app
      #   body:
      #     application/json:
      #       type: types.Session
      #   responses:
      #     200:
      #       description: Success
      #       body:
      #         application/json:
      #           example:
      #             message: Session created
      #     400:
      #       description: Unsuccessful
      #       body:
      #         application/json:
      #           example:
      #             message: Error in creating Session

      /{sessionId}/attendances:
        get:
          displayName: Get Attendance
          description: Retrieves attendance data for a given session id
          responses:
           200:
            body:
              application/json:
                type: types.AttendanceBaseModel[]
           400:
             body:
               application/json:
                 example:
                   message: Error retrieving attendance    
        post:
          displayName: Update/Create Attendance
          description: Update or Create Attendance List for a given session
          body:
            application/json:
              description: Payload should be an Attendance object 
              type: types.AttendanceUpdateModel[]    
          responses:
            200:
              description: Success
              body:
                application/json:
                  example:
                    message: Attendance taken      
            400:
              body:
                application/json:
                  example: 
                    message: Error updating attendance list.     
        patch:
          displayName: Update Attendance
          description: Update Attendance List for a given session
          body:
            application/json:
              description: Payload should be an Attendance object 
              type: types.AttendanceUpdateModel[]    
          responses:
            200:
              description: Success
              body:
                application/json:
                  example:
                    message: Attendance list updated      
            400:
              body:
                application/json:
                  example: 
                    message: Error updating attendance list.
      /{sessionId}/assessments:
        post:
          displayName: Create Assessments
          description: create a new assessment 
          body:
            application/json:
              type: types.AssessmentCreateModel
          responses:
            200:
              description: Success
              body:
                application/json:
                  example:
                    message: assessment created
            400:
              description: Unsuccessful
              body:
                application/json:
                  example:
                    message: Error in creating assessment!
    /{teamSeasonId}/enrollments:
      get:
        displayName: Get Enrollments
        description: Get enrollments for a given session
        responses:
          200:
            body:
              application/json:
                type: types.Enrollment[]   
          400:
            body:
              application/json:
                example:
                  message: Error retrieving enrollments
          404:
            body:
              application/json:
                example:
                  message: No enrollments for this session
  /all:
    get:
      displayName: Get All
      description: Get all objects (i.e. team seasons, sessions, enrollments etc) under a coachId for active seasons for a given date  in one call.
      responses:
        200:
          description: Successfully retrieved user's Team-Seasons
          body:
            application/json:
              type: types.TeamSeason[]
        400: 
          body:
            application/json:
              example:
                message: Error retrieving Team-Seasons
        404: 
          body:
            application/json:
              example:
                message: Team-Seasons Not Found




/assessments/{studentId}:
  get:
    description: Get assessments for a given student
    responses:
      200:
        body:
          application/json:
            type: types.Assessment[]   
      400:
        body:
          application/json:
            example:
              message: Error retrieving enrollments
      404:
        body:
          application/json:
            example:
              message: Student has no assessments

  /{assessmentId}:
    patch:
      displayName: Update Assessment
      description: update assessment record
      body:
        application/json:
          description: Payload should be an Assessment object 
          type: types.AssessmentUpdateModel 
      responses:
        200:
          body:
            application/json:
              example:
                message: Assessment updated
        400: 
          body:
            application/json:
                example:
                  message: Error updating Assessment
        404: 
          body:
            application/json:
              example:
                  message: Assessment Not Found 

/useraccount:
  get:
    description: Get user account details for given query params
    queryParameters:
      phoneNumber:
        displayName: phoneNumber
        description: User phone number
        type: string
    responses:
      200:
        body:
          application/json:
            type: types.UserAccount
/tasks:
  get:
    description: Retrieve SCORES tasks assigned to a specific contact
    queryParameters:
      contactId:
        description: The ID of the contact to retrieve tasks for
        type: string
        required: true
      sessionId:
        description: The ID of the session to retrieve tasks for
        type: string
        required: false
    responses:
      200:
        body:
          application/json:
            type: types.SCORES_Task[]
            example: |
              [
               {
                  "Id": "a01ABC123456789",
                  "AssignedBy": "a012345678901234",
                  "AssignedTo": "a098765432109876",
                  "CreatedBy": "a056789012345678",
                  "CreatedContact": "a034567890123456",
                  "Description": "Task description here",
                  "DueDate": "2024-11-30",
                  "LastModifiedBy": "a078901234567890",
                  "LastModifiedContact": "a098765432109876",
                  "OwnerId": "a076543210987654",
                  "Priority": 100.00,
                  "PriorityIcon": "🔴",
                  "ResourceLink": "https://example.com/resource",
                  "Session": "a054321098765432",
                  "Name": "Task Name",
                  "TaskStatus": "Complete",
                  "TaskType": "HR Requirement"
                }
              ]
  post: 
    description: Create a new SCORES task
    body:
      application/json:
        type: types.SCORES_Task_Create
    responses:
      200:
        body:
          application/json:
            example:
              message: Task created
  /{coachId}/stats:
    get:
      description: Retrieve summary statistics of SCORES tasks assigned to a specific coach, grouped by status
      responses:
        200:
          body:
            application/json:
              type: object
              example: |
                {
                  "Not Started": 1,
                  "Started": 0,
                  "Complete": 42
                }
  /{taskId}:
    uriParameters:
      taskId:
        description: The ID of the SCORES task to retrieve tags for
        type: string
        required: true
    get: 
      description: Retrieves a specific task by ID, including attendance records if available.
      responses:
        200:
          body:
            application/json:
              type: types.SCORES_Task[]
              example: |
                [
                  {
                    "Id": "a01ABC123456789",
                    "AssignedBy": "a012345678901234",
                    "AssignedTo": "a098765432109876",
                    "CreatedBy": "a056789012345678",
                    "CreatedContact": "a034567890123456",
                    "Description": "Task description here",
                    "DueDate": "2024-11-30",
                    "LastModifiedBy": "a078901234567890",
                    "LastModifiedContact": "a098765432109876",
                    "OwnerId": "a076543210987654",
                    "Priority": 100.00,
                    "PriorityIcon": "🔴",
                    "ResourceLink": "https://example.com/resource",
                    "Session": "a054321098765432",
                    "Name": "Task Name",
                    "TaskStatus": "Complete",
                    "TaskType": "HR Requirement",
                    "Attendances": []
                  }
                ]
    patch:
      description: Update a SCORES task
      body:
        application/json:
          type: types.SCORES_Task_Create
      responses:
        200:
          body:
            application/json:
              example:
                message: Task updated
    delete:
      description: Delete a SCORES task
      responses:
        200:
          body:
            application/json:
              example:
                message: Task deleted successfully.
    /tags:
      get:
        description: Retrieve tags associated with a specific SCORES task
        responses:
          200:
            body:
              application/json:
                type: types.SCORES_Tag[]
                example: |
                  [
                    {
                      "Id": "a09ABC123456789",
                      "TaskId": "a01ABC123456789",
                      "TaskName": "Task Name",
                      "TagId": "a04ABC123456789",
                      "TagName": "Urgent",
                      "TagColor": "#FF0000",
                      "Description": "This task is urgent.",
                      "TaskTagName": "Urgency Tag"
                    }
                  ]